})
# Carte des accidents
filtered_map_data <- reactive({
data %>%
filter(grav %in% input$filter_grav,
lum %in% input$filter_lum_map,
atm %in% input$filter_atm_map,
region %in% input$filter_region_map)
})
output$accidents_map <- renderLeaflet({
leaflet(data = filtered_map_data()) %>%
addTiles() %>%
setView(lng = 2.2137, lat = 46.2276, zoom = 6) %>%
addCircleMarkers(
lng = ~long, lat = ~lat,
color = ~case_when(
grav == "Tué" ~ "red",
grav == "Blessé hospitalisé" ~ "orange",
TRUE ~ "green"
),
radius = 5,
label = ~paste0("Gravité : ", grav,
"<br>Luminosité : ", lum,
"<br>Atmosphère : ", atm,
"<br>Region : ", region),
)
})
}
# Exécution de l'application
shinyApp(ui = ui, server = server)
library(tidyr)
library(dplyr)
library(ggplot2)
library(naniar)
library(skimr)
library(VIM)
library(readr)
library(leaflet)
usagers <- usagers_2023
lieux <- lieux_2023
vehicules <- vehicules_2023
caract <- caract_2023
# Fusion des données
dataFus <- usagers |>  left_join(lieux, by = "Num_Acc")
dataFus <- dataFus |>  left_join(vehicules, by = "Num_Acc")
dataFus <- dataFus |>  left_join(caract, by = "Num_Acc")
skim(dataFus)
gg_miss_var(dataFus)
aggr(dataFus, col = c("blue", "red"), numbers = TRUE, starVars = TRUE, labels = names(dataFus), cex.axis =.7, gap = 3, ylab = c("Valeurs manquantes", "Modèle"))
dataset <- dataFus[, -c(21, 34)]
# Création du facteur avec les libellés correspondants
dataset$lum <- factor(dataset$lum,
levels = c(1, 2, 3, 4, 5, -1),
labels = c("Plein jour", "Crépuscule ou aube", "Nuit sans éclairage",
"Nuit avec éclairage non allumé", "Nuit avec éclairage allumé", "non renseigné"))
# Création du facteur avec les libellés correspondants
dataset$agg_factor <- factor(dataset$agg,
levels = c(1, 2),
labels = c("Hors agglomération", "En agglomération"))
# Création de la variable "region" avec case_when
dataset <- dataset|>
mutate(
region = case_when(
# Auvergne-Rhône-Alpes
dep %in% c("01", "03", "07", "15", "26", "38", "42", "43", "63", "69", "73", "74") ~ "Auvergne-Rhône-Alpes",
# Bourgogne-Franche-Comté
dep %in% c("21", "25", "39", "58", "70", "71", "89", "90") ~ "Bourgogne-Franche-Comté",
# Bretagne
dep %in% c("22", "29", "35", "56") ~ "Bretagne",
# Centre-Val de Loire
dep %in% c("18", "28", "36", "37", "41", "45") ~ "Centre-Val de Loire",
# Corse
dep %in% c("2A", "2B") ~ "Corse",
# Grand Est
dep %in% c("08", "10", "51", "52", "54", "55", "57", "67", "68", "88") ~ "Grand Est",
# Hauts-de-France
dep %in% c("02", "59", "60", "62", "80") ~ "Hauts-de-France",
# Île-de-France
dep %in% c("75", "77", "78", "91", "92", "93", "94", "95") ~ "Île-de-France",
# Normandie
dep %in% c("14", "27", "50", "61", "76") ~ "Normandie",
# Nouvelle-Aquitaine
dep %in% c("16", "17", "19", "23", "24", "33", "40", "47", "64", "79", "86", "87") ~ "Nouvelle-Aquitaine",
# Occitanie
dep %in% c("09", "11", "12", "30", "31", "32", "34", "46", "48", "65", "66", "81", "82") ~ "Occitanie",
# Pays de la Loire
dep %in% c("44", "49", "53", "72", "85") ~ "Pays de la Loire",
# Provence-Alpes-Côte d'Azur
dep %in% c("04", "05", "06", "13", "83", "84") ~ "Provence-Alpes-Côte d'Azur",
# Guadeloupe (971)
dep == "971" ~ "Guadeloupe",
# Martinique (972)
dep == "972" ~ "Martinique",
# Guyane (973)
dep == "973" ~ "Guyane",
# La Réunion (974)
dep == "974" ~ "La Réunion",
# Mayotte (976)
dep == "976" ~ "Mayotte",
# Autres départements ou inconnus
TRUE ~ "Région non identifiée"
)
)
dataset |>
ggplot(aes(x = mois)) +
geom_bar(fill = "#3e4c63") +
labs(
title = "Le nombre d'accidents de la circulation par mois",
x = "Mois",
y = "Nombre d'accidents corporels \nde la circulation en France en 2023"
) +
theme_minimal()
dataset |>
filter(grav == 2) |>
ggplot() +
geom_bar(aes(x = mois)) +
labs(
title = "Le nombre de morts sur la route par mois",
x = "Mois",
y = "Nombre de morts sur la route en France en 2023"
) +
theme_minimal()
dataset |>
group_by(jour)|>
summarize(nb_accidents = n())|>
ggplot(aes(x = jour, y = nb_accidents)) +
geom_line(color = "#3e4c63") +
labs(
title = "Nombre d'accodents par jour",
x = "Jour de l'année",
y = "Nombre moyen d'accidents \npar jour"
) +
theme_minimal()
scale_x_date(date_labels = "%B")
dataset |>
filter(grav == 2) |>
mutate(age = 2023 - an_nais)  |>
group_by(age)  |>
summarise(accidenteds_number = n())  |>
group_by(age)  |>
summarize(accidenteds_number = mean(accidenteds_number))  |>
ggplot(aes(x = age, y = accidenteds_number, group = 1)) +
geom_vline(aes(xintercept = 25), colour = "#ccd7ea", size = 1) +
geom_vline(aes(xintercept = 35), size = 1, colour = "#ccd7ea") +
geom_line(color = "#3e4c63", size = 1.5) +
labs(
title = "Nombre de decès par tranche d'âge",
x = "Age",
y = "Nombre annuel moyen de morts sur \n la route en fonction de l'age"
) +
theme_minimal()
dataset |>
filter(catu == 1) |>
filter(sexe >0) |>
group_by(sexe) |>
summarize(accidenteds_number = n()) |>
group_by(sexe) |>
summarize(accidenteds_number = mean(accidenteds_number))  |>
mutate(sexe = factor(sexe, labels = c('Homme', 'Femme')))  |>
ggplot(aes(x = sexe, fill = sexe, y = accidenteds_number)) +
geom_col() +
scale_fill_manual(values = c("#2b8cbe", "#fa9fb5")) +
guides(fill=FALSE) +
labs(
title = "Acccidents en fonction du sexe",
x = "Sexe",
y = "Nombre moyen d'accidents \n de la route par sexe en 2023"
) +
theme_minimal()
dataset |>
group_by(region) |>
summarise(nbreAcc = n()) |>
ggplot() +
geom_col(aes(x = region, y = nbreAcc, fill = region)) +
labs(x = "Région", y = "Nombre d'accidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calcul des pourcentages pour chaque modalité de la variable atm
dataset$atm <- factor(dataset$atm,
levels = c(-1, 1, 2, 3, 4, 5, 6, 7, 8, 9),
labels = c("Non renseigné",
"Normale",
"Pluie légère",
"Pluie forte",
"Neige - grêle",
"Brouillard - fumée",
"Vent fort - tempête",
"Temps éblouissant",
"Temps couvert",
"Autre"))
data_atm <- dataset |>
group_by(atm) |>
summarise(count = n(), .groups = "drop") |>
mutate(percent = round(100 * count / sum(count), 1))
# Création du camembert
ggplot(data_atm, aes(x = "", y = percent, fill = atm)) +
geom_col(width = 1, color = "white") +
coord_polar(theta = "y") +  # Transformation en diagramme circulaire
labs(
title = "Répartition des accidents suivants l'atmosphère",
fill = "atmosphère",
y = NULL,
x = NULL
) +
geom_text(aes(label = paste0(percent, "%")),
position = position_stack(vjust = 0.5), size = 2) +  # Ajout des pourcentages
theme_minimal() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# Calcul des pourcentages pour chaque modalité de la variable grav
# Création du facteur avec les libellés correspondants
dataset$grav <- factor(dataset$grav,
levels = c(1, 2, 3, 4, -1),
labels = c("Indemne", "Tué", "Blessé hospitalisé", "Blessé léger", "non renseignés"))
data_camembert <- dataset |>
group_by(grav) |>
summarise(count = n(), .groups = "drop") |>
mutate(percent = round(100 * count / sum(count), 1))  # Calcul des pourcentages
# Création du camembert
ggplot(data_camembert, aes(x = "", y = percent, fill = grav)) +
geom_col(width = 1, color = "white") +  # Création des segments du camembert
coord_polar(theta = "y") +  # Transformation en diagramme circulaire
labs(
title = "Répartition des modalités de la variable Gravité",
fill = "Gravité",
y = NULL,
x = NULL
) +
geom_text(aes(label = paste0(percent, "%")),
position = position_stack(vjust = 0.5), size = 2) +  # Ajout des pourcentages
theme_minimal() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# Calcul des pourcentages pour chaque modalité de la variable lum(luminosité)
data_lum <- dataset |>
group_by(lum) |>
summarise(count = n(), .groups = "drop") |>
mutate(percent = round(100 * count / sum(count), 1))
# Création du camembert
ggplot(data_lum, aes(x = "", y = percent, fill = lum)) +
geom_col(width = 1, color = "white") +
coord_polar(theta = "y") +  # Transformation en diagramme circulaire
labs(
title = "Répartition des accidents suivants la luminosité",
fill = "Luminosité",
y = NULL,
x = NULL
) +
geom_text(aes(label = paste0(percent, "%")),
position = position_stack(vjust = 0.5), size = 2) +  # Ajout des pourcentages
theme_minimal() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
carac <- read_delim("caract-2023.csv",
delim = ";", escape_double = FALSE, col_types = cols(lat = col_number(),
long = col_number()), na = "NA",
trim_ws = TRUE)
library(tidyr)
library(dplyr)
library(ggplot2)
library(naniar)
library(skimr)
library(VIM)
library(readr)
library(leaflet)
usagers <- usagers_2023
lieux <- lieux_2023
vehicules <- vehicules_2023
caract <- caract_2023
# Fusion des données
dataFus <- usagers |>  left_join(lieux, by = "Num_Acc")
dataFus <- dataFus |>  left_join(vehicules, by = "Num_Acc")
dataFus <- dataFus |>  left_join(caract, by = "Num_Acc")
skim(dataFus)
gg_miss_var(dataFus)
aggr(dataFus, col = c("blue", "red"), numbers = TRUE, starVars = TRUE, labels = names(dataFus), cex.axis =.7, gap = 3, ylab = c("Valeurs manquantes", "Modèle"))
dataset <- dataFus[, -c(21, 34)]
# Création du facteur avec les libellés correspondants
dataset$lum <- factor(dataset$lum,
levels = c(1, 2, 3, 4, 5, -1),
labels = c("Plein jour", "Crépuscule ou aube", "Nuit sans éclairage",
"Nuit avec éclairage non allumé", "Nuit avec éclairage allumé", "non renseigné"))
# Création du facteur avec les libellés correspondants
dataset$agg_factor <- factor(dataset$agg,
levels = c(1, 2),
labels = c("Hors agglomération", "En agglomération"))
# Création de la variable "region" avec case_when
dataset <- dataset|>
mutate(
region = case_when(
# Auvergne-Rhône-Alpes
dep %in% c("01", "03", "07", "15", "26", "38", "42", "43", "63", "69", "73", "74") ~ "Auvergne-Rhône-Alpes",
# Bourgogne-Franche-Comté
dep %in% c("21", "25", "39", "58", "70", "71", "89", "90") ~ "Bourgogne-Franche-Comté",
# Bretagne
dep %in% c("22", "29", "35", "56") ~ "Bretagne",
# Centre-Val de Loire
dep %in% c("18", "28", "36", "37", "41", "45") ~ "Centre-Val de Loire",
# Corse
dep %in% c("2A", "2B") ~ "Corse",
# Grand Est
dep %in% c("08", "10", "51", "52", "54", "55", "57", "67", "68", "88") ~ "Grand Est",
# Hauts-de-France
dep %in% c("02", "59", "60", "62", "80") ~ "Hauts-de-France",
# Île-de-France
dep %in% c("75", "77", "78", "91", "92", "93", "94", "95") ~ "Île-de-France",
# Normandie
dep %in% c("14", "27", "50", "61", "76") ~ "Normandie",
# Nouvelle-Aquitaine
dep %in% c("16", "17", "19", "23", "24", "33", "40", "47", "64", "79", "86", "87") ~ "Nouvelle-Aquitaine",
# Occitanie
dep %in% c("09", "11", "12", "30", "31", "32", "34", "46", "48", "65", "66", "81", "82") ~ "Occitanie",
# Pays de la Loire
dep %in% c("44", "49", "53", "72", "85") ~ "Pays de la Loire",
# Provence-Alpes-Côte d'Azur
dep %in% c("04", "05", "06", "13", "83", "84") ~ "Provence-Alpes-Côte d'Azur",
# Guadeloupe (971)
dep == "971" ~ "Guadeloupe",
# Martinique (972)
dep == "972" ~ "Martinique",
# Guyane (973)
dep == "973" ~ "Guyane",
# La Réunion (974)
dep == "974" ~ "La Réunion",
# Mayotte (976)
dep == "976" ~ "Mayotte",
# Autres départements ou inconnus
TRUE ~ "Région non identifiée"
)
)
dataset |>
ggplot(aes(x = mois)) +
geom_bar(fill = "#3e4c63") +
labs(
title = "Le nombre d'accidents de la circulation par mois",
x = "Mois",
y = "Nombre d'accidents corporels \nde la circulation en France en 2023"
) +
theme_minimal()
dataset |>
filter(grav == 2) |>
ggplot() +
geom_bar(aes(x = mois)) +
labs(
title = "Le nombre de morts sur la route par mois",
x = "Mois",
y = "Nombre de morts sur la route en France en 2023"
) +
theme_minimal()
dataset |>
group_by(jour)|>
summarize(nb_accidents = n())|>
ggplot(aes(x = jour, y = nb_accidents)) +
geom_line(color = "#3e4c63") +
labs(
title = "Nombre d'accodents par jour",
x = "Jour de l'année",
y = "Nombre moyen d'accidents \npar jour"
) +
theme_minimal()
scale_x_date(date_labels = "%B")
dataset |>
filter(grav == 2) |>
mutate(age = 2023 - an_nais)  |>
group_by(age)  |>
summarise(accidenteds_number = n())  |>
group_by(age)  |>
summarize(accidenteds_number = mean(accidenteds_number))  |>
ggplot(aes(x = age, y = accidenteds_number, group = 1)) +
geom_vline(aes(xintercept = 25), colour = "#ccd7ea", size = 1) +
geom_vline(aes(xintercept = 35), size = 1, colour = "#ccd7ea") +
geom_line(color = "#3e4c63", size = 1.5) +
labs(
title = "Nombre de decès par tranche d'âge",
x = "Age",
y = "Nombre annuel moyen de morts sur \n la route en fonction de l'age"
) +
theme_minimal()
dataset |>
filter(catu == 1) |>
filter(sexe >0) |>
group_by(sexe) |>
summarize(accidenteds_number = n()) |>
group_by(sexe) |>
summarize(accidenteds_number = mean(accidenteds_number))  |>
mutate(sexe = factor(sexe, labels = c('Homme', 'Femme')))  |>
ggplot(aes(x = sexe, fill = sexe, y = accidenteds_number)) +
geom_col() +
scale_fill_manual(values = c("#2b8cbe", "#fa9fb5")) +
guides(fill=FALSE) +
labs(
title = "Acccidents en fonction du sexe",
x = "Sexe",
y = "Nombre moyen d'accidents \n de la route par sexe en 2023"
) +
theme_minimal()
dataset |>
group_by(region) |>
summarise(nbreAcc = n()) |>
ggplot() +
geom_col(aes(x = region, y = nbreAcc, fill = region)) +
labs(x = "Région", y = "Nombre d'accidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calcul des pourcentages pour chaque modalité de la variable atm
dataset$atm <- factor(dataset$atm,
levels = c(-1, 1, 2, 3, 4, 5, 6, 7, 8, 9),
labels = c("Non renseigné",
"Normale",
"Pluie légère",
"Pluie forte",
"Neige - grêle",
"Brouillard - fumée",
"Vent fort - tempête",
"Temps éblouissant",
"Temps couvert",
"Autre"))
data_atm <- dataset |>
group_by(atm) |>
summarise(count = n(), .groups = "drop") |>
mutate(percent = round(100 * count / sum(count), 1))
# Création du camembert
ggplot(data_atm, aes(x = "", y = percent, fill = atm)) +
geom_col(width = 1, color = "white") +
coord_polar(theta = "y") +  # Transformation en diagramme circulaire
labs(
title = "Répartition des accidents suivants l'atmosphère",
fill = "atmosphère",
y = NULL,
x = NULL
) +
geom_text(aes(label = paste0(percent, "%")),
position = position_stack(vjust = 0.5), size = 2) +  # Ajout des pourcentages
theme_minimal() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# Calcul des pourcentages pour chaque modalité de la variable grav
# Création du facteur avec les libellés correspondants
dataset$grav <- factor(dataset$grav,
levels = c(1, 2, 3, 4, -1),
labels = c("Indemne", "Tué", "Blessé hospitalisé", "Blessé léger", "non renseignés"))
data_camembert <- dataset |>
group_by(grav) |>
summarise(count = n(), .groups = "drop") |>
mutate(percent = round(100 * count / sum(count), 1))  # Calcul des pourcentages
# Création du camembert
ggplot(data_camembert, aes(x = "", y = percent, fill = grav)) +
geom_col(width = 1, color = "white") +  # Création des segments du camembert
coord_polar(theta = "y") +  # Transformation en diagramme circulaire
labs(
title = "Répartition des modalités de la variable Gravité",
fill = "Gravité",
y = NULL,
x = NULL
) +
geom_text(aes(label = paste0(percent, "%")),
position = position_stack(vjust = 0.5), size = 2) +  # Ajout des pourcentages
theme_minimal() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# Calcul des pourcentages pour chaque modalité de la variable lum(luminosité)
data_lum <- dataset |>
group_by(lum) |>
summarise(count = n(), .groups = "drop") |>
mutate(percent = round(100 * count / sum(count), 1))
# Création du camembert
ggplot(data_lum, aes(x = "", y = percent, fill = lum)) +
geom_col(width = 1, color = "white") +
coord_polar(theta = "y") +  # Transformation en diagramme circulaire
labs(
title = "Répartition des accidents suivants la luminosité",
fill = "Luminosité",
y = NULL,
x = NULL
) +
geom_text(aes(label = paste0(percent, "%")),
position = position_stack(vjust = 0.5), size = 2) +  # Ajout des pourcentages
theme_minimal() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
setwd("~/Documents/S1-24-25/Initiation à R/Projet")
carac <- read_delim("caract-2023.csv",
delim = ";", escape_double = FALSE, col_types = cols(lat = col_number(),
long = col_number()), na = "NA",
trim_ws = TRUE)
deathsData <- carac |>
filter(!is.na(lat) & !is.na(long) & lat != 0 & long != 0) |>
mutate(Lat = lat / 100000000, Long = long / 100000000)  |>
filter(lat > 40 & long < 15) |>
select(Num_Acc, Lat, Long)
leaflet(deathsData) |>
addTiles() |>
setView(lng = 2.213749, lat = 46.227638, zoom = 6) |>
addMarkers(lng = ~Long, lat = ~Lat)
